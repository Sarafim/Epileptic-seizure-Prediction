import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
import sklearn.svm as sksvm
import sklearn.preprocessing as skpp

import load as ld
import preprocessing as pp

# sources and path
path_mat      = 'D:/Diploma/MAT/'
path_csv      = 'D:/Diploma/Signals/'
path_features = 'D:/Diploma/Features/f_'
path_results  = 'D:/Diploma/Results/'

# Patients
patients_test = [
                # 'boyko-18',
                # 'bernatskaya1-5','bernatskaya-15',
                # 'butkevych-15',
                # 'gudz-5',
                'kaganiuk-15',
                'klavdiev-15',
                'kozubal-13',
                'lekhkodukh-15',
                'mazanichka-15',
                'nesterchuk1-14','nesterchuk2-15','nesterchuk3-15','nesterchuk4-15',
                'podvizhenko-15',
                # 'polulyah-14-15',
                # 'reshetnik-15',
                # 'serdich1-15','serdich-14',
                # 'stupak-14',
                # 'tarasov-18',
                # 'tumareva-14-15',
                # 'volkogon-15'
            ]
patients_train=[
                'boyko-18',
                'bernatskaya1-5','bernatskaya-15',
                'butkevych-15',
                # 'gudz-5',
                # 'kaganiuk-15',
                # 'klavdiev-15',
                # 'kozubal-13',
                # 'lekhkodukh-15',
                # 'mazanichka-15',
                # 'nesterchuk1-14','nesterchuk2-15','nesterchuk3-15','nesterchuk4-15',
                # 'podvizhenko-15',
                # 'polulyah-14-15',
                # 'reshetnik-15',
                # 'serdich1-15','serdich-14',
                # 'stupak-14',
                # 'tarasov-18',
                # 'tumareva-14-15',
                # 'volkogon-15'
         ]
patients=[
            # 'drozdov-14',
            # 'dukova-15',
            # 'feschenko-15',
            # 'karpenko-15',
            # 'kharchenko-15-16',
            # 'kostuk-15',
            # 'levchenko1_26_01_14-15',
            'levchenko2_21_06_14-14-15-16',
            'marchenko1-15',
            'marchenko-15',
            'petrian-15',
            'semashko1-14',
            'semashko-14',
            'semashko2-14',
            'shamina-15',
            'surdu-15',
            'yakimets-14'
]

path_mat      = 'D:/Diploma/MAT/Generalized_Seizures_processed/'
path_csv      = 'D:/Diploma/Signals/Generalized_Seizures_processed/'
path_features = 'D:/Diploma/Features/f_'
# Settings
LOAD_MAT_FILE     = True
SELECT_FEATURE    = False
CREATING_DATA_SET = False
MODEL             = False
SCALE             = False
f_window_size = 300
f_window_step  = 60
features   = dict()
features['length']  = True
features['meanNN']  = True
features['SDNN']    = True
features['RMSSD']   = True
features['variance']= True
features['NN50']    = True
features['FDF']     = True

eig_window_size = 2
eig_num = 0

# kernel = ['linear', 'rbf', 'sigmoid', 'poly']
kernel = ['rbf']
nu = 0.1
############################################################################
#  .mat into .csv
if LOAD_MAT_FILE:
    print('.mat into .csv')
    for patient in patients:
        item = ld.load_mat(path_mat + patient + '.mat')
        item.to_csv(path_csv + patient + '.csv', mode = 'w',index=False)
############################################################################
# feature selections
if SELECT_FEATURE:
    print('Feature selections')
    for patient in patients_train:
        path_source       = path_csv      + patient + '.csv'
        path_feature_csv  = path_features + patient + '.csv'
        path_feature_xlsx = path_features + patient + '.xlsx'
        pp.new_features(path_source,path_feature_csv,path_feature_xlsx, f_window_size, f_window_step,features)
    for patient in patients_test:
        path_source       = path_csv      + patient + '.csv'
        path_feature_csv  = path_features + patient + '.csv'
        path_feature_xlsx = path_features + patient + '.xlsx'
        pp.new_features(path_source,path_feature_csv,path_feature_xlsx, f_window_size, f_window_step,features)
############################################################################
# creating dataset
if CREATING_DATA_SET:
    print('Creating data set')
    train_interictal_w,train_interictal_v,train_preictal_w,train_preictal_v                   = pp.eig_separation(  patients_train,
                                                                                                                    eig = True,
                                                                                                                    path_features = path_features,
                                                                                                                    path_csv = path_csv,
                                                                                                                    f_window_size = f_window_size,
                                                                                                                    f_window_step = f_window_step,
                                                                                                                    eig_window_size = eig_window_size,
                                                                                                                    eig_num = eig_num)
    train_interictal_time,train_interictal_feature,train_preictal_time,train_preictal_feature = pp.eig_separation(  patients_train,
                                                                                                                    eig = False,
                                                                                                                    path_features = path_features,
                                                                                                                    path_csv = path_csv,
                                                                                                                    f_window_size = f_window_size,
                                                                                                                    f_window_step = f_window_step,
                                                                                                                    eig_window_size = eig_window_size,
                                                                                                                    eig_num = eig_num)
    test_interictal_w, test_interictal_v, test_preictal_w, test_preictal_v                   = pp.eig_separation(patients_test,
                                                                                               eig=True,
                                                                                               path_features=path_features,
                                                                                               path_csv=path_csv,
                                                                                               f_window_size=f_window_size,
                                                                                               f_window_step=f_window_step,
                                                                                               eig_window_size=eig_window_size,
                                                                                               eig_num=eig_num)
    test_interictal_time, test_interictal_feature, test_preictal_time, test_preictal_feature =  pp.eig_separation(patients_test,
                                                                                                eig=False,
                                                                                                path_features=path_features,
                                                                                                path_csv=path_csv,
                                                                                                f_window_size=f_window_size,
                                                                                                f_window_step=f_window_step,
                                                                                                eig_window_size=eig_window_size,
                                                                                                eig_num=eig_num)
############################################################################
# Model
if MODEL:
    print('Model')
    train_interictal_scale = train_interictal_feature
    train_preictal_scale   = train_preictal_feature
    test_interictal_scale  = test_interictal_feature
    test_preictal_scale    = test_preictal_feature
    if SCALE:
        train_interictal_scale = skpp.scale(train_interictal_scale)
        train_preictal_scale   = skpp.scale(train_preictal_scale)
        test_interictal_scale  = skpp.scale(test_interictal_scale)
        test_preictal_scale    = skpp.scale(test_preictal_scale)

    # np.random.shuffle(train_interictal_scale)
    X_train          = train_interictal_scale
    interictal_test  = test_interictal_scale
    preictal_test    = test_preictal_scale
    for ker in kernel:
        clf = sksvm.OneClassSVM(nu = nu,kernel=ker).fit(X_train)
        interictal_predict = clf.predict(interictal_test);
        preictal_predict   = clf.predict(preictal_test);
        # Success calculation
        interictal_prediction_success = sum([1 for i in interictal_predict if i>0])/interictal_predict.__len__()

        total_preictal_success = sum([1 for i in preictal_predict if i<0])/preictal_predict.__len__()
        # preictal_prediction_success   = sum([(preictal_predict[i]<0)   or (preictal_predict[i-1]<0)   for i in range(preictal_predict.__len__())   if int(i%2)])/(preictal_predict.__len__()/2)
        amount = 0
        success = 0
        total = 0
        for i in range(preictal_predict.__len__()+1):
            if i:
                if(i%(f_window_size/f_window_step - eig_window_size+1)):
                    success = 0
                    continue
                else:
                    amount +=1
                    for j in range(int(f_window_size/f_window_step - eig_window_size+1)):
                        if(preictal_predict[i-j-1] < 0):
                            success+=1
                if success:
                    total +=1
        preictal_prediction_success_new = total/(amount)


        print('\n',ker)
        print('prediction_quality            = ', (interictal_prediction_success + preictal_prediction_success_new)/2)
        print('\n')
        print('interictal_amount             = ', test_interictal_scale.__len__())
        print('preictal_amount               = ', test_preictal_scale.__len__())
        print('interictal_prediction_success = ', interictal_prediction_success )
        print('preictal_prediction_success   = ', preictal_prediction_success_new )
        print('preictal_total_success        = ', total_preictal_success )
        print(6)


# # /////////////////////////////////////////////////////
# TIME = ld.load_column(path_s, data_type='time')
# DATA = ld.load_column(path_s, data_type='data')
# RR_raw = ld.load_column(path_s, data_type='RR_raw')
# RR_pos = ld.load_column(path_s, data_type='RR_pos')

# ax = [0,1,2]
# fig = plt.figure()
# ax[0] = fig.add_subplot(111 + 0)
# ax[0].plot(TIME['time'],DATA['data'])
# ax[0].plot([x/100  for x in sS['seizureStart']], np.zeros(len(sS['seizureStart'])), marker='o',linestyle=' ', color='r')
# ax[0].title.set_text('ECG')
# ax[0].grid(True)
# fig.set_size_inches(25, 20)
# fig.savefig('D:/Diploma/ECG_' + str(test) + '_' + str(f_window_size) + '_' + str(f_window_step) + '_' + str(eig_step) + '_' + str(eig_num) + '.png')  # save the figure to file
# plt.close(fig)
# ///////////////////////////////////////////////////////////////

#
# clf = sksvm.OneClassSVM(nu = 0.1,kernel='rbf').fit(v)
# predict = clf.predict(v);
# chance = clf.decision_function(v).ravel()
#
# fig = plt.figure()
# time = [(f_window_size + f_window_step*(i+4))/100 for i in range(ind+1)]
# tick = range(0,150,2)
# red_patch = list()
# for i in range(sS['seizureStart'].__len__()):
#     red_patch.append(mpatches.Patch(label='SeizureStart : SeizureEnd  ' + str(sS['seizureStart'][i]/100.0) +' : ' +   str(sE['seizureEnd'][i]/100.0)))
# # ax = [0,1,2,3,4,5,6,7]
# # for num in range(7):
# #     ax[num] = fig.add_subplot(711 + num)
# #     plt.legend(handles=red_patch,loc=2)
# #     ax[num].plot(time,w[num])
# #     ax[num].plot([x/100  for x in sS['seizureStart']], np.zeros(len(sS['seizureStart'])), marker='o',linestyle=' ', color='r')
# #     ax[num].title.set_text('Change of the ' +str(num) + ' Eigenvalue')
# #     ax[num].xaxis.set_ticks(list(tick))
# #     ax[num].grid(True)
#
# # fig.set_size_inches(25, 80)
#
# ax = [0,1,2,3,4]
# ax[0] = fig.add_subplot(511 + 0)
# plt.legend(handles=red_patch,loc=2)
# ax[0].plot(time,w[eig_num])
# ax[0].plot([x/100  for x in sS['seizureStart']], np.zeros(len(sS['seizureStart'])), marker='o',linestyle=' ', color='r')
# ax[0].title.set_text('Change of the ' +str(0) + ' Eigenvalue')
# ax[0].xaxis.set_ticks(list(tick))
# ax[0].grid(True)
#
# ax[1] = fig.add_subplot(511 + 1)
# ax[1].plot(time,predict)
# ax[1].plot([x/100  for x in sS['seizureStart']], np.zeros(len(sS['seizureStart'])), marker='o',linestyle=' ', color='r')
# ax[1].title.set_text('Decision_function, ' +str(0) + ' Eigenvalue')
# ax[1].xaxis.set_ticks(list(tick))
# ax[1].grid(True)
#
# ax[2] = fig.add_subplot(511 + 2)
# ax[2].plot(time,chance)
# ax[2].plot([x/100  for x in sS['seizureStart']], np.zeros(len(sS['seizureStart'])), marker='o',linestyle=' ', color='r')
# ax[2].title.set_text('Change of the ' +str(0) + ' Eigenvalue')
# ax[2].xaxis.set_ticks(list(tick))
# ax[2].axis([0, 148,-0.05, 0.05])
# ax[2].grid(True)
#
# # fig.set_size_inches(25, 20)
# # fig.savefig('D:/Diploma/' + str(test) + '_' + str(f_window_size) + '_' + str(f_window_step) + '_' + str(eig_step) + '_' + str(eig_num) + '.png')  # save the figure to file
# # plt.close(fig)
#
# ax[3] = fig.add_subplot(511 + 3)
# ax[3].plot(TIME['time'],DATA['data'])
# ax[3].plot(sS['seizureStart'], np.zeros(len(sS['seizureStart'])), marker='o',linestyle=' ', color='r')
# ax[3].grid(True)
#
# ax[4] = fig.add_subplot(511 + 4)
# ax[4].plot(RR_pos['RR_pos'],RR_raw['RR_raw'])
# ax[4].plot(sS['seizureStart'], np.zeros(len(sS['seizureStart'])), marker='o',linestyle=' ', color='r')
# ax[4].grid(True)
#
# fig.set_size_inches(60, 30)
# fig.savefig('D:/Diploma/ECG_' + str(test) + '_' + str(f_window_size) + '_' + str(f_window_step) + '_' + str(eig_step) + '_' + str(eig_num) + '.png')  # save the figure to file
# plt.close(fig)
#
#
#
# w = list(w)
# w=pd.DataFrame({'1':w[0],'2':w[1],'3':w[2],'4':w[3],'5':w[4],'6':w[5],'7':w[6],'8':w[7]})
# writer = pd.ExcelWriter('D:/Diploma/Features/w_stupak-14.xlsx')
# w.to_excel(writer, 'Sheet1')
# writer.save()
# print(ind)

# строки -  по фичерам, 8 строкs
